{"version":3,"sources":["firebase.js","Todo.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","Todo","props","useState","todo","input","setInput","open","setopen","Modal","onClose","placeholder","value","onChange","event","target","onClick","preventDefault","collection","doc","id","set","merge","List","className","ListItem","ListItemText","primary","Button","e","delete","App","todos","setTodos","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","FormControl","InputLabel","Input","disabled","type","add","timestamp","FieldValue","serverTimestamp","variant","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kXAYeA,EAXKC,IAASC,cAAc,CACzCC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,8CAGcC,Y,iBCgDRC,MArDf,SAAcC,GAAQ,IAAD,EACOC,mBAASD,EAAME,KAAKA,MAD3B,mBACZC,EADY,KACLC,EADK,OAEKH,oBAAS,GAFd,mBAEZI,EAFY,KAENC,EAFM,KAsBnB,OACE,6BACE,kBAACC,EAAA,EAAD,CAAOF,KAAMA,EAAMG,QApBH,WAClBF,GAAQ,KAoBJ,8BACE,gDACA,2BACEG,YAAaT,EAAME,KAAKA,KACxBQ,MAAOP,EACPQ,SAAU,SAAAC,GAAK,OAAIR,EAASQ,EAAMC,OAAOH,UAE3C,4BAAQI,QAxBI,SAAAF,GAClBA,EAAMG,iBACN3B,EAAG4B,WAAW,SACXC,IAAIjB,EAAME,KAAKgB,IACfC,IACC,CACEjB,KAAMC,GAER,CAAEiB,OAAO,IAEbhB,EAASD,GACTG,GAAQ,KAaF,YAGJ,kBAACe,EAAA,EAAD,CAAMC,UAAU,aACd,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAcC,QAASzB,EAAME,KAAKA,QAEpC,kBAACwB,EAAA,EAAD,CAAQZ,QAAS,SAAAa,GAAC,OAAIrB,GAAQ,KAA9B,QACA,kBAAC,IAAD,CACEQ,QAAS,SAAAF,GAAK,OACZxB,EACG4B,WAAW,SACXC,IAAIjB,EAAME,KAAKgB,IACfU,eCYAC,MAvDf,WAAgB,IAAD,EACa5B,mBAAS,IADtB,mBACN6B,EADM,KACCC,EADD,OAEa9B,mBAAS,IAFtB,mBAENE,EAFM,KAECC,EAFD,KAuBb,OAnBA4B,qBAAU,WACR5C,EAAG4B,WAAW,SACXiB,QAAQ,YAAa,QACrBC,YAAW,SAAAC,GACVJ,EACEI,EAASC,KAAKC,KAAI,SAAApB,GAAG,MAAK,CAAEC,GAAID,EAAIC,GAAIhB,KAAMe,EAAIqB,OAAOpC,eAG9D,IAYD,yBAAKoB,UAAU,OACb,kDACA,8BACE,kBAACiB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,qBACA,kBAACC,EAAA,EAAD,CACE/B,MAAOP,EACPQ,SAAU,SAAAC,GAAK,OAAIR,EAASQ,EAAMC,OAAOH,WAI7C,kBAACgB,EAAA,EAAD,CACEgB,UAAWvC,EACXwC,KAAK,SACL7B,QAxBQ,SAAAF,GACdA,EAAMG,iBACN3B,EAAG4B,WAAW,SAAS4B,IAAI,CACzB1C,KAAMC,EACN0C,UAAWxD,IAASS,UAAUgD,WAAWC,oBAE3ChB,EAAS,GAAD,mBAAKD,GAAL,CAAY3B,KACpBC,EAAS,KAkBH4C,QAAQ,YACRC,MAAM,WALR,aAWF,4BACGnB,EAAMO,KAAI,SAAAnC,GAAI,OACb,kBAAC,EAAD,CAAMA,KAAMA,UC5CFgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6c8d6a61.chunk.js","sourcesContent":["import firebase from \"firebase\";\nconst firebaseApp = firebase.initializeApp({\n  apiKey: \"AIzaSyA3wM_NUc2A8bO--hmSUdYCVCr4Hpi4XaY\",\n  authDomain: \"todo-app-54987.firebaseapp.com\",\n  databaseURL: \"https://todo-app-54987.firebaseio.com\",\n  projectId: \"todo-app-54987\",\n  storageBucket: \"todo-app-54987.appspot.com\",\n  messagingSenderId: \"197137614958\",\n  appId: \"1:197137614958:web:89cad06c198494c3fdbe7f\"\n});\n\nconst db = firebaseApp.firestore();\nexport default db;\n","import React, { useState } from \"react\";\nimport { List, ListItem, ListItemText, Button, Modal } from \"@material-ui/core\";\nimport \"./Todo.css\";\nimport db from \"./firebase\";\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\n\nfunction Todo(props) {\n  const [input, setInput] = useState(props.todo.todo);\n  const [open, setopen] = useState(false);\n\n  const handleClose = () => {\n    setopen(false);\n  };\n\n  const updateValue = event => {\n    event.preventDefault();\n    db.collection(\"todos\")\n      .doc(props.todo.id)\n      .set(\n        {\n          todo: input\n        },\n        { merge: true }\n      );\n    setInput(input);\n    setopen(false);\n  };\n\n  return (\n    <div>\n      <Modal open={open} onClose={handleClose}>\n        <form>\n          <label>Update a Todo</label>\n          <input\n            placeholder={props.todo.todo}\n            value={input}\n            onChange={event => setInput(event.target.value)}\n          />\n          <button onClick={updateValue}>Update</button>\n        </form>\n      </Modal>\n      <List className=\"todo_list\">\n        <ListItem>\n          <ListItemText primary={props.todo.todo} />\n        </ListItem>\n        <Button onClick={e => setopen(true)}>Edit</Button>\n        <DeleteForeverIcon\n          onClick={event =>\n            db\n              .collection(\"todos\")\n              .doc(props.todo.id)\n              .delete()\n          }\n        />\n      </List>\n    </div>\n  );\n}\n\nexport default Todo;\n","import React, { useState, useEffect } from \"react\";\nimport { Button, FormControl, Input, InputLabel } from \"@material-ui/core\";\n\nimport \"./App.css\";\nimport Todo from \"./Todo\";\nimport db from \"./firebase\";\nimport firebase from \"firebase\";\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [input, setInput] = useState(\"\");\n\n  useEffect(() => {\n    db.collection(\"todos\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot(snapshot => {\n        setTodos(\n          snapshot.docs.map(doc => ({ id: doc.id, todo: doc.data().todo }))\n        );\n      });\n  }, []);\n\n  const addTodo = event => {\n    event.preventDefault();\n    db.collection(\"todos\").add({\n      todo: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    });\n    setTodos([...todos, input]);\n    setInput(\"\");\n  };\n  return (\n    <div className=\"App\">\n      <h1>Hello Amitoj Singh</h1>\n      <form>\n        <FormControl>\n          <InputLabel>Write a Todo</InputLabel>\n          <Input\n            value={input}\n            onChange={event => setInput(event.target.value)}\n          />\n        </FormControl>\n\n        <Button\n          disabled={!input}\n          type=\"submit\"\n          onClick={addTodo}\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Add Todo\n        </Button>\n      </form>\n\n      <ul>\n        {todos.map(todo => (\n          <Todo todo={todo} />\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}